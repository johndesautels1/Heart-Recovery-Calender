import passport from 'passport';
import { Strategy as GoogleStrategy } from 'passport-google-oauth20';
import { Strategy as AppleStrategy } from 'passport-apple';
import User from '../models/User';

passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID!,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
  callbackURL: process.env.GOOGLE_CALLBACK_URL || '/api/auth/google/callback'
}, async (accessToken, refreshToken, profile, done) => {
  let user = await User.findOne({ where: { email: profile.emails?.[0].value } });
  if (!user) {
    user = await User.create({
      name: profile.displayName,
      email: profile.emails?.[0].value
    });
  }
  done(null, user);
}));

passport.use(new AppleStrategy({
  clientID: process.env.APPLE_CLIENT_ID!,
  teamID: process.env.APPLE_TEAM_ID!,
  keyID: process.env.APPLE_KEY_ID!,
  privateKeyString: process.env.APPLE_PRIVATE_KEY!,
  callbackURL: process.env.APPLE_CALLBACK_URL || '/api/auth/apple/callback'
}, async (accessToken, refreshToken, idToken, profile, done) => {
  let user = await User.findOne({ where: { email: profile.email } });
  if (!user) {
    user = await User.create({
      name: profile.name?.firstName ?? 'Apple User',
      email: profile.email
    });
  }
  done(null, user);
}));

passport.serializeUser((user: any, done) => done(null, user.id));
passport.deserializeUser(async (id: string | number, done) => {
  const user = await User.findByPk(id as number);
  done(null, user);
});

export default passport;